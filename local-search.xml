<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>信息与存储</title>
    <link href="/2022/07/12/a008-%E4%BF%A1%E6%81%AF%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
    <url>/2022/07/12/a008-%E4%BF%A1%E6%81%AF%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><ol><li>关于cookies<blockquote><p>cookies不是缓存;</p><p>当 web 服务器向浏览器发送网页后，连接被关闭，服务器会忘记用户的一切，Cookie 是为了解决记住用户信息发明的;</p><p>使得基于无状态的http协议记录稳定的状态信息成为可能；</p><p>格式为键值对，名字自定义;</p><p>{key,value,domain,path,exprits,size};</p><p>第一次访问服务器通过响应头的set-cookie发送到用户浏览器并保存在本地的一小块数据;</p><p>它会在浏览器之后向同一服务器再次发送请求时被携带在http请求头Cookie并发送到服务器;</p></blockquote></li></ol><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-8af4f72c16e0cf906027ed41f5e20e17_b.jpg&refer=http%3A%2F%2Fpic4.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660188325&t=f2070b56c0dfc213e52ca02de17990af" alt="原理图"></p><ol start="2"><li><p>cookie的作用</p><blockquote><p>记录用户的登录状态，购物车的状态</p><p>主题风格等个性化的设置</p></blockquote></li><li><p>cookie的分类：</p><blockquote><p>会话级cookie：保存在内存，当前域名关闭时自动失效</p><p>持久级cookie：保存在硬盘，当失效时间到了自动失效；<br>存储位置：C:\Users\Public(公用)\AppData\Local\Google\Chrome\User Data\Default</p></blockquote></li><li><p>cookie的特点</p><blockquote><p>每一个域名只会存4k大小</p><p>保存在客户端，不安全</p><p>主domain污染，子域名发送请求时也会带上主域名的信息，造成臃肿</p><p>查看cookie：当前网页(开发者工具)，所有cookie(设置)</p><p>客户端状态管理技术：将状态存放在客户端。</p></blockquote></li></ol><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><ol><li><p>关于session</p><blockquote><p>当我们用户第一次登录之后，在服务器就会生成一个会话标识(sessionid),并保存在服务器的内存中，默认保存30分钟</p><p>这个sessionid会通过set-cookie发送给客户端保存，下次访问通过cookie将sessionid传输给服务器，服务器就知道你是哪个用户</p><p>所以cookie中就不用保存用户密码等信息，只需保存sessionid就可以了</p><p>sessionid一般是通过会话级cookie保存和传输，提高了安全性</p></blockquote></li><li><p>session特点</p><blockquote><p>服务器状态管理技术：将状态存放在服务器中</p><p>增加了服务器的负担，影响服务器性能<br>解决：可以配置多台服务器</p><p>用户每次访问不同的服务器，且并不是每台服务器都记录了sessionid<br>解决1：ip捆绑(每次只访问同一台服务器)</p><p>解决2：session复制(每台服务器都复制一份相同的sessionid)</p><p>解决3：单点登录(所有用户都只请求单点登录服务器，所有的sessionid都保存在单点服务器上，之后分发请求)<br>缺点：用户过多还是会崩溃，sessionid可以被伪造</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20210301190137744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NjIwMTI5,size_16,color_FFFFFF,t_70#pic_center" alt="原理图"></p><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ol><li>token原理<blockquote><p>用户登录成功后，服务器生成一个令牌(token)，里面包含了userid等用户信息，保存在服务器的文本文档或数据库中</p><p>服务器再将token发送给客户端，本地可以存储起来</p><p>客户端每次向服务端请求资源的时候需要带着服务端签发的token</p><p>服务端收到请求，然后去验证客户端请求里面带着的token，如果验证成功，就向客户端返回请求的数据</p><p>客户端和服务器端之间的token验证是通过人为的加密的约定</p></blockquote></li></ol><p><img src="https://img-blog.csdnimg.cn/20200904225849315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzYyMjY3,size_16,color_FFFFFF,t_70#pic_center" alt="原理图"></p><ol start="2"><li>加密方式<table><thead><tr><th>对称加密解密</th><th>双钥加密解密</th><th>只加密不解密</th></tr></thead><tbody><tr><td>DES、AES</td><td>RSA</td><td>MD5、SHA系列</td></tr></tbody></table><blockquote><p>缺点：金融项目、银行项目、第三方支付项目加密要求达不到<br>方法：签名和数字证书，主要用于接口测试</p></blockquote></li></ol><h4 id="三者的区别与联系"><a href="#三者的区别与联系" class="headerlink" title="三者的区别与联系"></a>三者的区别与联系</h4><p><strong>相同点：</strong></p><ul><li>都是在服务器产生的，都用于身份验证</li><li>用于客户端和服务器端状态保持的</li><li>请求接口都需要，cookie和session在请求头中，token在接口参数中</li></ul><p><strong>不同点：</strong></p><ul><li>cookie存储在客户端，session存储在服务器内存，默认30分钟，session安全性高于cookie，重要数据放session，次要数据放cookie；</li><li>token存储在服务器数据库中，比session更加节约服务器资源</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><h4 id="H5本地存储"><a href="#H5本地存储" class="headerlink" title="H5本地存储"></a>H5本地存储</h4><blockquote><p>localstorage 永久存储本地域名，除非手动删除，不同域名及子域名不共享</p><p>sessionstorage 关闭当前会话即消失，不同域名及相同域名子域名不共享</p><p>server端拿不到本地存储的信息，不会被拦截，可以通过地址拼接获取</p><p>存储大小为5m</p><p>利用本地存储，可以减少网络传输</p></blockquote><h4 id="indexedDB和webSQL"><a href="#indexedDB和webSQL" class="headerlink" title="indexedDB和webSQL"></a>indexedDB和webSQL</h4><blockquote><p>一种能在浏览器中持久的存储结构化数据的数据库，并为web应用提供了丰富的查询能力</p><p>按照域名分配独立空间，一个独立域名下可以创建多个数据库，每个数据库可以创建多个对象存储空间(表)，一个存储空间可以存储多个对象数据</p></blockquote><h4 id="H5离线缓存"><a href="#H5离线缓存" class="headerlink" title="H5离线缓存"></a>H5离线缓存</h4><blockquote><p>让web应用在离线的情况下继续使用，通过manifest文件指明需要缓存的资源</p></blockquote><hr><p>参考视频：<a href="https://www.bilibili.com/video/BV1UA411H77k?spm_id_from=333.999.0.0">BV1UA411H77k</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookies</tag>
      
      <tag>session</tag>
      
      <tag>token</tag>
      
      <tag>H5本地存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异步编程之Promise</title>
    <link href="/2022/07/12/a007-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B9%8BPromise/"/>
    <url>/2022/07/12/a007-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B9%8BPromise/</url>
    
    <content type="html"><![CDATA[<h3 id="理解和使用"><a href="#理解和使用" class="headerlink" title="理解和使用"></a>理解和使用</h3><ul><li><p>promise是js中异步编程的新的解决方案，旧方案是单纯使用回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//回调地狱</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/index.html&#x27;</span>,  <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">throw</span> err<br>  &#125;<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/main.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-keyword">throw</span> err<br>      &#125;<br>      fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./views/update.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) &#123;<br>              <span class="hljs-keyword">throw</span> err<br>          &#125;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>      &#125;)   <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>异步编程例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//fs 文件操作</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;&#125;)<br><br><span class="hljs-comment">//数据库操作</span><br><span class="hljs-keyword">let</span> db = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>).<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">port</span>:<span class="hljs-string">&#x27;3306&#x27;</span>, <span class="hljs-comment">// 可选,默认3306</span><br>  <span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;xxxxxx&#x27;</span>,<br>  <span class="hljs-attr">database</span>:<span class="hljs-string">&#x27;mydbNew&#x27;</span><br>&#125;)<br><span class="hljs-keyword">let</span> strSql7 = <span class="hljs-string">&#x27;insert into studetNew (id,name,password) value (?,?,?)&#x27;</span><br>db.<span class="hljs-title function_">query</span>(strSql7,[<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;s1xpences&#x27;</span>,<span class="hljs-string">&#x27;123123&#x27;</span>],<span class="hljs-function">(<span class="hljs-params">err,results</span>) =&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(err)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;插入数据操作成功&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//AJAX</span><br> $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server.json&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;&#125;)<br><br><span class="hljs-comment">//定时器</span><br><span class="hljs-title function_">setTimeOut</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="promise里面包裹一个异步操作"><a href="#promise里面包裹一个异步操作" class="headerlink" title="promise里面包裹一个异步操作"></a>promise里面包裹一个异步操作</h3><ul><li><p>异步操作成功调resolve，将promise对象的状态设置为成功；失败调reject，将promise对象的状态设置为失败</p></li><li><p>then指定成功使的回调，catch指定失败时的回调</p></li><li><p>获取成功和失败的结果值，通过resolve和reject传递，通过then的value,和catch的reason接受</p></li></ul><h3 id="promise对象的状态"><a href="#promise对象的状态" class="headerlink" title="promise对象的状态"></a>promise对象的状态</h3><ul><li><p>就是实例对象中的一个属性 PromiseState，有三种状态</p><blockquote><p>pendding   未决定的，初始化的默认值<br>resolved &#x2F; fullfilled  成功<br>rejected  失败</p></blockquote></li><li><p>状态变换只有两种可能且只能改变一次 pending &#x3D;&#x3D;&gt; resolved, pending &#x3D;&#x3D;&gt; rejected</p></li></ul><h3 id="promise对象的值"><a href="#promise对象的值" class="headerlink" title="promise对象的值"></a>promise对象的值</h3><ul><li><p>实例对象的一个属性 PromiseResult，保存的是异步任务 成功&#x2F;失败 的结果，只能通过reslove和reject对结果进行修改</p></li><li><p>调resolve和reject即修改状态又设置结果值</p></li></ul><h3 id="promise的基本流程"><a href="#promise的基本流程" class="headerlink" title="promise的基本流程"></a>promise的基本流程</h3><p><img src="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="基本流程"></p><h3 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h3><ol><li><p>executer函数：执行器(reslove,reject)&#x3D;&gt;{}</p><blockquote><p>即promise实例的参数，在promise内部立即同步执行，异步操作在执行器内部执行</p></blockquote></li><li><p>Promise.prototype.then,指定成功的回调，返回一个新的promise对象</p></li><li><p>promise.prototype.catch，指定失败的回调</p></li><li><p>Promise.resolve(参数)</p><blockquote><p>传入参数为非promise类型的对象，则返回成功的promise对象，值为参数<br>传入参数为promise对象，则参数决定resolve的结果，成功失败由内部promise决定，值也是</p></blockquote></li><li><p>Promise.reject(参数)</p><blockquote><p>返回一个失败的promise对象<br>不论传入的参数是何种类型，返回结果都是一个失败的promise对象，值为传入的参数<br>即使参数为一个成功的promise对象，返回的状态仍未失败，值为传入的promise对象<br>报错：当前有一个失败的promise而且没有对应的回调对其做处理</p></blockquote></li><li><p>Promise.all()</p><blockquote><p>参数是promise对象组成的数组<br>返回一个新的promise，所有成功则成功，一个失败即失败<br>成功则值为每一个promise值组成的数组，失败则值为其中第一个失败的promise对象的值</p></blockquote></li><li><p>Promise.race()</p><blockquote><p>参数是promise对象组成的数组<br>返回一个新的promise，第一个完成的promise状态即为最终状态，第一个的值则为最终值</p></blockquote></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>改变promise对象的状态？</p><blockquote><p>reslove、reject、throw(异步任务里面不能抛错)</p></blockquote></li><li><p>改变状态和指定的回调函数谁先执行？</p><blockquote><p>如果executer函数中是同步任务，则先改变状态后执行回调<br>若executer函数中是异步任务，则先执行回调后改变状态<br>回调执行的时候既能拿到数据</p></blockquote></li><li><p>promise.then()返回的新的promise的结果状态由什么决定？</p><blockquote><p>then里面的回调是异步执行的<br>由then()指定的回调函数的返回(return)结果决定</p><ul><li>throw value，则状态rejected,值value</li><li>return value，则状态fullfilled,值value</li><li>return new Promise((reslove,reject)&#x3D;&gt;{})，状态和值都由里面promise决定</li></ul></blockquote></li><li><p>链式调用？</p><blockquote><p>通过then的链式调用串联多个 同步&#x2F;异步 任务</p></blockquote></li><li><p>异常穿透？</p><blockquote><p>当使用promise的then链式调用时，可以在最后指定失败的回调<br>前面任何操作出了异常，都会传到最后失败的回调中处理</p></blockquote></li><li><p>中断promise链？</p><blockquote><p>当使用promise的then链式调用时，在中间中断，不再调用后面的回调函数<br>方法：在调用函数中返回一个pending状态的promise对象,return new Promise(()&#x3D;&gt;{})</p></blockquote></li></ol><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><ol><li><p>函数执行返回值为promise对象</p><blockquote><p>promise对象的结果由async函数执行的返回值决定(规则同then())</p></blockquote></li><li><p>await表达式</p><blockquote><p>await右侧的表达式一般为promise对象，但也可以是其他值<br>如果表达式是promise对象，await返回的是promise成功的结果值<br>如果表达式是其他值，直接将此值作为await的返回值<br>await必须写在async函数中，async函数中可以没有await<br>如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理，结合async和await使用<br>错误不用每一层都判断，只用在最外面加try…catch即可</p></blockquote></li><li><p>使用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//有可能出现错误的代码写在这里</span><br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>    <span class="hljs-comment">//出错后的处理,e为错误对象</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125;)<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p<br>    &#125;<span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">//拿到失败的结果值</span><br>    &#125;<br>&#125;<br><span class="hljs-title function_">main</span>()<br></code></pre></td></tr></table></figure></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//回调函数</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index3.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1+data2+data3)<br>        &#125;)<br>    &#125;)<br>&#125;)<br><br><span class="hljs-comment">//Promise形式</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data1)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>            <span class="hljs-title function_">reslove</span>(value + data2)<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index3.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value + data3)<br>        &#125;)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">reason</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason)<br>&#125;)<br><br><span class="hljs-comment">//async形式</span><br><span class="hljs-keyword">let</span> p1 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data1)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">let</span> p2 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data2)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">let</span> p3 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;index1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reslove</span>(data3)<br>    &#125;)<br>&#125;)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> p1<br>        <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> p2<br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> p3<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1+data2+data3)<br>    &#125;<span class="hljs-keyword">catch</span>(err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;<br>&#125; <br><span class="hljs-title function_">main</span>()<br></code></pre></td></tr></table></figure><hr><p>官方文档：​<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">mozilla</a><br>参考视频：<a href="https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.999.0.0">BV1GA411x7z1</a>  <a href="https://www.bilibili.com/video/BV17j411f74d?spm_id_from=333.999.0.0">BV17j411f74d</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端模块化</title>
    <link href="/2022/07/11/a006-%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2022/07/11/a006-%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>将一个复杂的程序依据一定的规范封装成几个块，并进行组合在一起。</p></li><li><p>块内部数据是私有的，只是向外部暴露一些接口与外部其它模块通信。</p></li><li><p>发展史：</p><blockquote><p>namespace(简单封装)，本质是对象，一点不安全<br>IIFE模式(匿名闭包)，利用立即执行函数，然后暴露<br>IIFE增强模式，当前模块化的基础</p></blockquote></li><li><p>优点：</p><blockquote><p>避免命名冲突(减少命名空间污染)<br>更好的分离, 按需加载<br>更高复用性<br>高可维护性</p></blockquote></li><li><p>缺点：</p><blockquote><p>需要很多的script标签<br>请求过多<br>依赖模糊<br>难以维护</p></blockquote></li></ol><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>common.js</li><li>AMD规范</li><li>CMD规范</li><li>es6规范</li></ul><h3 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h3><ul><li>每个文件都可当作一个模块，常用于服务器端</li><li>在服务器端: 模块的加载是运行时同步加载的(node)</li><li>在浏览器端: 模块需要提前编译打包处理(Browserify工具)，浏览器不认识require  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">暴露模块   </span><br><span class="hljs-comment">暴露的本质都是导出expors对象 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">module</span> = &#123;<br>    <span class="hljs-attr">exports</span>:&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入模块</span><br><span class="hljs-comment">第三方模块：xxx为模块名(包名),放在文件最上面</span><br><span class="hljs-comment">自定义模块：xxx为模块文件路径 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">require</span>(xxx)<br></code></pre></td></tr></table></figure></li></ul><h3 id="AMD规范-require-js"><a href="#AMD规范-require-js" class="headerlink" title="AMD规范 require.js"></a>AMD规范 require.js</h3><ul><li>专门用于浏览器端, 模块的加载是异步的  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">导出</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;)                               <span class="hljs-comment">//定义没有依赖的模块</span><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;module1&#x27;</span>,<span class="hljs-string">&#x27;module2&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">m1,m2</span>)&#123;&#125;)     <span class="hljs-comment">//定义有依赖的模块</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">导入 </span><br><span class="hljs-comment">*/</span><br>requirejs([<span class="hljs-string">&#x27;module3&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">m3</span>) &#123;&#125;)<br>requirejs.<span class="hljs-title function_">config</span>(&#123;                                  <span class="hljs-comment">//配置数组中模块加载路径：</span><br>    <span class="hljs-attr">baseUrl</span>:<span class="hljs-string">&#x27;js/&#x27;</span>                                   <span class="hljs-comment">//不写模块路径相对于main.js,写的话相当于根路径下js+模块路径</span><br>    <span class="hljs-attr">paths</span>:&#123;<br>        <span class="hljs-attr">module1</span>:<span class="hljs-string">&#x27;./module1&#x27;</span>,                        <span class="hljs-comment">//不用加js后缀，默认已经加上了</span><br>        <span class="hljs-attr">module2</span>:<span class="hljs-string">&#x27;./module2&#x27;</span>,<br>        <span class="hljs-attr">module3</span>:<span class="hljs-string">&#x27;./module3&#x27;</span>,<br>        <span class="hljs-attr">jquery</span>:<span class="hljs-string">&#x27;./jQuery 1.11.1&#x27;</span>                    <span class="hljs-comment">//jquery要小写且支持amd规范</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 最后引入的时候使用一个script标签即可 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&#x27;main.js&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;require.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure></li></ul><h3 id="CMD规范-Sea-js"><a href="#CMD规范-Sea-js" class="headerlink" title="CMD规范 Sea.js"></a>CMD规范 Sea.js</h3><ul><li>专门用于浏览器端, 模块的加载是异步的 </li><li>模块使用时才会加载执行  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">导出</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-comment">//module.exports = xxx</span><br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span> = xxx<br>&#125;)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入 </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-comment">//同步引入</span><br>    <span class="hljs-keyword">let</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module1&#x27;</span>)               <span class="hljs-comment">//引入最后拿到这个模块暴露的东西，但是模块上面的代码也会执行</span><br>    <span class="hljs-comment">//异步引入</span><br>    <span class="hljs-built_in">require</span>.<span class="hljs-title function_">async</span>(<span class="hljs-string">&#x27;./module2&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">module2</span>) &#123;<br>      module2.<span class="hljs-title function_">foo</span>()<br>    &#125;)<br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">b</span> = xxx<br>&#125;)<br></code></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;Sea.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>                       <span class="hljs-comment">&lt;!-- 先引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title class_">Seajs</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;main.js&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 后使用 --&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="es6规范"><a href="#es6规范" class="headerlink" title="es6规范"></a>es6规范</h3><ul><li>依赖模块需要编译打包处理，很多浏览器不支持es6语法，需要编译打包成es5  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">具名导出 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> value                                        <span class="hljs-comment">//分别暴露</span><br><span class="hljs-keyword">export</span> &#123;value,value&#125;                                <span class="hljs-comment">//统一暴露</span><br><span class="hljs-comment">//引入：</span><br><span class="hljs-keyword">import</span> &#123;名字<span class="hljs-number">1</span>,名字<span class="hljs-number">2</span>&#125; <span class="hljs-keyword">from</span> 路径    <br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> 变量名 <span class="hljs-keyword">from</span> 路径    <br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">import</span> &#123;名字<span class="hljs-number">1</span>,名字<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 自定义名字&#125; <span class="hljs-keyword">from</span> 路径          <span class="hljs-comment">//具名导出，引入的时候必须使用对象解构赋值的方式 </span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">统一导出 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> value                                <span class="hljs-comment">//一个模块中只能用一次</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">引入 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> 自定义名字 <span class="hljs-keyword">from</span> 路径                          <span class="hljs-comment">//引用第三方库，就是这种方式 </span><br></code></pre></td></tr></table></figure></li><li>实现(浏览器端)<blockquote><p>使用Babel将es6编译成es5代码(里面有commonjs的语法)，使用browserify编译打包js<br>配置.babelrc ,rc run control运行时控制文件</p></blockquote></li></ul><hr><p>参考视频：<a href="https://www.bilibili.com/video/BV18s411E7Tj?spm_id_from=333.1007.top_right_bar_window_history.content.click">BV18s411E7Tj</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模块化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode代码片段快捷生成</title>
    <link href="/2022/07/08/a005-vscode%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90/"/>
    <url>/2022/07/08/a005-vscode%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>vscode设置&#x3D;&gt;用户代码片段</p><h3 id="vue3配置"><a href="#vue3配置" class="headerlink" title="vue3配置"></a>vue3配置</h3><p>输入vue回车进入vue.json.code-snippets</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Print to console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;   $2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;/template&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot;&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;export default &#123;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;    name: \&quot;\&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot; setup&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;import &#123; ref, reactive &#125; from &#x27;vue&#x27;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;/script&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;style lang=\&quot;less\&quot; scoped&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;   $3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;&lt;/style&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Log output to console&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在vscode中输入vue即可快捷生成指定的代码块</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的git命令</title>
    <link href="/2022/07/07/a004-%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/07/a004-%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="本地信息配置"><a href="#本地信息配置" class="headerlink" title="本地信息配置"></a>本地信息配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global --list<br>git config --global user.name<br>git config --global user.email<br></code></pre></td></tr></table></figure><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>公钥路径：C:&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa.pub<br>验证ssh是否生效：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;</a>                                       </p></blockquote><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -avv<br>git branch -vv<br>git remote -vv<br>git diff<br>git log --oneline<br>git checkout xxx      或  git switch xxx           <br>git checkout -b xxx   或  git switch -c xxx<br></code></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">files change...<br>git pull<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br></code></pre></td></tr></table></figure><h3 id="创建新工作区并推送到远程仓库"><a href="#创建新工作区并推送到远程仓库" class="headerlink" title="创建新工作区并推送到远程仓库"></a>创建新工作区并推送到远程仓库</h3><ol><li><p>由自己创建仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git branch -M main                     //重命名当前本地分支，初始分支名为master<br>git remote add origin git@xxxx.git     //origin为远程仓库名，可以自定义<br>git push -u origin main:master         //main为本地分支名，master为远程分支名，之后push需要指定远程仓库名<br>或<br>git push -u origin master              //本地分支名和远程分支名一样，之后可直接push，本地分支名和远程分支名尽量保持一样<br></code></pre></td></tr></table></figure></li><li><p>由别人创建仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone  git@xxxx.git                //克隆默认分支，克隆后本地默认与指定远程分支建立联系<br>或<br>git clone -b xxx git@xxxx.git          //克隆其他分支，克隆后本地默认与指定远程分支建立联系<br></code></pre></td></tr></table></figure></li></ol><h3 id="新建分支并推送远程仓库的对应分支"><a href="#新建分支并推送远程仓库的对应分支" class="headerlink" title="新建分支并推送远程仓库的对应分支"></a>新建分支并推送远程仓库的对应分支</h3><blockquote><p><strong>分支是用来开发不同功能的</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b 新分支名<br>git push -u origin dev<br></code></pre></td></tr></table></figure><h3 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h3><ol><li><p>本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -m 原分支名称 新分支名称<br></code></pre></td></tr></table></figure></li><li><p>远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git push --delete origin 自己的原分支名称 <br>git push origin 新分支名称<br></code></pre></td></tr></table></figure></li><li><p>重命名分支为远程默认分支时</p><blockquote><p>github打开当前仓库——&gt;settings——&gt;branches——&gt;手动重命名</p></blockquote></li></ol><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -d 本地分支名<br>git push origin --delete 远程分支名 <br></code></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote><p>切换到合并分支，合并其他工作树干净的分支</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git merge 被合并分支名<br></code></pre></td></tr></table></figure><h3 id="拉取远程新的分支并与本地建立连接"><a href="#拉取远程新的分支并与本地建立连接" class="headerlink" title="拉取远程新的分支并与本地建立连接"></a>拉取远程新的分支并与本地建立连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b 本地分支名 origin/远程分支名<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br><br>或<br><br>git fetch origin 远程分支名:本地分支名<br>git switch 本地分支名<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push -u origin 远程分支名<br></code></pre></td></tr></table></figure><h3 id="移除工作区修改"><a href="#移除工作区修改" class="headerlink" title="移除工作区修改"></a>移除工作区修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout . <br> <br>或  <br>  <br>git checkout 文件路径<br></code></pre></td></tr></table></figure><h3 id="取消add操作"><a href="#取消add操作" class="headerlink" title="取消add操作"></a>取消add操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">git restore --staged .<br><br>或<br><br>git restore --staged 文件路径<br></code></pre></td></tr></table></figure><h3 id="取消commit操作"><a href="#取消commit操作" class="headerlink" title="取消commit操作"></a>取消commit操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --hard 上一次的commitid<br></code></pre></td></tr></table></figure><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ol><li><p>版本回退</p><blockquote><p>不会破坏之前的版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --hard commitid<br>files change...<br>git add .<br>git commit -m &#x27;xxx&#x27;<br>git push<br>git pull 解决冲突<br></code></pre></td></tr></table></figure><blockquote><p>会破坏之前的版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --hard commitid<br>git push -f<br></code></pre></td></tr></table></figure></li><li><p>切换新分支指向想要回退的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b 分支名 commitid<br></code></pre></td></tr></table></figure></li></ol><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><blockquote><p><strong>tag是用来记录版本的</strong><br>tag给当前仓库commitid记录对应的版本信息，之后可以根据tag找到版本对应的commitid进行版本控制<br>开发完新功能后将功能分支合并到主分支，之后打tag，一般只用给主分支打tag</p></blockquote><pre><code class="hljs">git tag xxx                            //给最近的commitid打tag，当前未提交则为上次commitid打tag，当前已提交则为本次commitid打taggit tag xxx commitid                   //给指定的commitid打taggit tag xxx -m &quot;注释&quot; commitid         //给指定的commitid打tag同时添加注释git push origin xxx                    //将本地tag推送到远程git push origin --tag                  //本地所有tag推送到远程git tag --d xxx                        //删除本地tag，删除本地后git pull会将远程的tag拉下来git push origin -d xxx                 //删除远程taggit show xxx                           //查看对应tag提交信息git tag                                //查看本地所有tag                                         git ls-remote --tag                    //查看远程所有tag</code></pre><hr><p>官方文档：<a href="https://git-scm.com/book/zh/v2">Git</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有趣|有用的网站</title>
    <link href="/2022/07/06/a003-%E6%9C%89%E8%B6%A3-%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2022/07/06/a003-%E6%9C%89%E8%B6%A3-%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h3 id="影音类"><a href="#影音类" class="headerlink" title="影音类"></a>影音类</h3><ol><li><a href="https://4kan.vip/">4kan.vip&#x2F;</a></li><li><a href="https://vip.bljiex.com/">vip.bljiex.com&#x2F;</a></li><li><a href="http://music.alang.run/#/">一起听歌吧</a></li><li><a href="http://music.zhuolin.wang/">VIP付费音乐解析下载</a></li><li><a href="http://www.mvcat.com/">影猫</a></li><li><a href="http://www.549.tv/#%E8%A7%82%E5%BD%B1%E8%B5%84%E6%BA%90">网盘资源搜索</a></li><li><a href="https://pan.yuankongjian.com/">阿里云盘资源</a></li><li><a href="https://www.jitashe.org/guide/hottab/">吉他谱</a></li></ol><h3 id="休闲类"><a href="#休闲类" class="headerlink" title="休闲类"></a>休闲类</h3><ol><li><a href="https://www.yikm.net/">小霸王</a></li><li><a href="https://lemonjing.com/">柠檬精</a></li><li><a href="https://www.autopiano.cn/">在线弹钢琴</a></li><li><a href="https://www.hi2future.com/">时光邮局</a></li><li><a href="https://drrr.com/">公共聊天室</a></li><li><a href="https://web.xiangyin.mobi/#/xy//sentences">故乡的声音</a></li></ol><h3 id="网址导航类"><a href="#网址导航类" class="headerlink" title="网址导航类"></a>网址导航类</h3><ol><li><a href="https://it-cxy.top/">我的书签</a></li><li><a href="https://www.aixunni.com/">爱寻匿</a></li><li><a href="https://tophub.today/">今日热榜</a></li><li><a href="http://googlevip8.com/webstack">阿里渣渣</a></li></ol><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ol><li><a href="https://brie.fi/ng">视频聊天</a></li><li><a href="https://photofunia.com/">照片P在任何场景中，包括海报、墙体广告等</a></li><li><a href="http://ppt.sotary.com/web/wxapp/index.html">PPT超级市场：一些PPT的免费模板</a></li><li><a href="https://coderschool.cn/2476.html">android国外app下载</a></li><li><a href="http://guozhivip.com/tool/">工具大全</a></li><li><a href="http://receivefreesms.com/">临时接收手机验证码,保护隐私</a>(<a href="https://jiemahao.com/">https://jiemahao.com/</a>)</li><li><a href="https://yamadie.net/">破解软件</a></li><li><a href="https://www.mayixiongdi.cn/">软件聚合吧</a></li><li><a href="https://ps.gaoding.com/">在线ps</a></li><li><a href="https://www.windy.com/">专业的天气网站</a></li><li><a href="https://www.911cha.com/">生活、日常小工具在线查询~</a></li><li><a href="https://www.githubs.cn/">github中文社区</a></li><li><a href="https://jubt.ml/cn/index.html">磁力bt</a></li><li><a href="https://www.earthol.com/g/">世界地图</a></li><li><a href="https://report.amap.com/index.do">高德地图指数,可以查看全国主要城市的交通实时数据</a></li><li><a href="http://www.tcmap.com.cn/">地图地理网址</a></li><li><a href="https://www.portablesoft.org/subscribe/google-chrome/">旧版本chrome下载</a></li><li><a href="http://ftp.mozilla.org/pub/firefox/releases/">旧版本firefox下载</a></li><li><a href="https://nodejs.org/en/download/releases/">旧版本node下载</a></li><li><a href="https://bz.zzzmh.cn/index">极简壁纸</a></li><li><a href="https://chrome.zzzmh.cn/">极简插件chrome</a></li><li><a href="https://github.com/bannedbook/fanqiang">fanqiang工具</a></li><li><a href="http://emblemmatic.org/markmaker/#/">英文logo生成</a></li><li><a href="http://www.53bk.com/baokan/">全国报刊杂志大全</a></li><li><a href="https://github.com/zhaoolee/ChromeAppHeroes">chrome插件英雄榜</a></li><li><a href="https://www.sysmini.com/">极简系统</a></li><li><a href="https://www.polebrief.com/index">极简简历</a></li><li><a href="https://toonme.com/">生成卡通头像</a></li><li><a href="https://colleges.chat/">大学生活指北</a></li></ol><h3 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h3><ol><li><a href="http://qzbltushu.ys168.com/">考研书籍视频资源网站,免费,时效性好</a></li><li><a href="https://bbs.qzzn.com/">公务员考试论坛</a></li><li><a href="http://rlsbj.cq.gov.cn/ywzl/rsks/gwyks/">重庆公务员官网</a></li><li><a href="http://v.huatu.com/">华图在线</a></li><li><a href="http://ntce.neea.edu.cn/">教资</a></li><li><a href="https://learn.freecodecamp.one/">前端学习</a></li></ol><h3 id="素材类"><a href="#素材类" class="headerlink" title="素材类"></a>素材类</h3><ol><li><a href="https://flatuicolors.com/">flatuicolors.com&#x2F;</a></li><li><a href="https://uigradients.com/#Cherryblossoms">渐变色</a></li><li><a href="http://zhongguose.com/#yunshuilan">中国色</a></li><li><a href="https://colorleap.app/home">根据图片配色</a></li><li><a href="https://www.bitbug.net/">favicon生成</a></li><li><a href="https://icons8.com/">logo素材</a></li><li><a href="https://www.aigei.com/">音效</a></li><li><a href="https://shields.io/">github图标定制</a></li><li><a href="https://www.jq22.com/">jquery插件库</a></li><li><a href="https://demo.gin-vue-admin.com/#/layout/dashboard">后台管理系统参考</a></li><li><a href="https://apps.timwhitlock.info/emoji/tables/unicode">emoji</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站大全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的md</title>
    <link href="/2022/07/06/a002-%E4%BC%98%E9%9B%85%E7%9A%84md/"/>
    <url>/2022/07/06/a002-%E4%BC%98%E9%9B%85%E7%9A%84md/</url>
    
    <content type="html"><![CDATA[<h3 id="创建标题"><a href="#创建标题" class="headerlink" title="创建标题"></a>创建标题</h3><p>格式：#+空格+名称 ，最后回车。实现标题的添加，不同的#数量对应不同的标题，一级标题一个，二级两个类推。</p><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><ol><li><p>加粗<br><strong>字体</strong>左右两边加两个*</p></li><li><p>斜体<br><em>字体</em>左右两边加一个*</p></li><li><p>删除线<br><del>字体</del>左右两边加两个波浪线~</p></li></ol><h3 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h3><blockquote><p>是通过大于号&gt;+ 空格，文字最后回车</p></blockquote><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个- 或三个*</p><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>![自己起的图片名称]+(),可以在括号里添加本地图片或网络图片<br><img src="https://csfile.ossxrcloud.net/ydnImg/200X200/802dac9a93084_1641346280372.png" alt="实例"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>[名称]+()，括号里面添加1的网址<br><a href="https://markdown.com.cn/">实例</a></p><h3 id="添加列表"><a href="#添加列表" class="headerlink" title="添加列表"></a>添加列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>1+点号（英文输入法）+空格</p><ol><li>a</li><li>b</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>*或+或- 加空格</p><ul><li>a</li><li>b</li></ul><h3 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h3><p>竖杠</p><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>s1xpences</td><td>男</td><td>18</td></tr></tbody></table><h3 id="添加代码块"><a href="#添加代码块" class="headerlink" title="添加代码块"></a>添加代码块</h3><p>三个&#96;+语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;0.0&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>官方文档：<a href="https://markdown.com.cn/">markdown</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+git搭建个人博客</title>
    <link href="/2022/07/01/a001-hexo+git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/07/01/a001-hexo+git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>新建项目文件夹，安装hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo | npm <span class="hljs-keyword">install</span> hexo -g<br></code></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>安装git插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>配置_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxx/xxx.github.io.git</span> <br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch-name</span>]         <span class="hljs-comment">#仓库默认分支</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li><p>清空public文件夹</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span>                <br></code></pre></td></tr></table></figure></li><li><p>生成public文件夹</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo g  | hexo <span class="hljs-keyword">generate</span>   <br></code></pre></td></tr></table></figure></li><li><p>启动本地服务,默认地址为<a href="http://localhost:4000/(%E5%8F%AF%E8%B7%B3%E8%BF%87)">http://localhost:4000/(可跳过)</a></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo s  <span class="hljs-string">| hexo server </span><br></code></pre></td></tr></table></figure></li><li><p>部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo d  <span class="hljs-string">| hexo deploy</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ol><li><p>新建md文件</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>[layout] &lt;title&gt; <br>如：hexo <span class="hljs-keyword">new</span> <span class="hljs-type">photo</span> <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；<br>若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p></li><li><p>layout的指定</p><blockquote><p>不写默认：以post.md为模板，_posts下生成文件；</p><p>draft：以draft.md为模板，_draft文件夹下生成草稿；</p><p>page：以page.md为模板，source下生成文件夹，并自带index.md，可以通过xxx.github.io&#x2F;文件夹名 访问，相当于新建一个页面；</p><p>自定义xxx：以xxx.md为模板，_posts下生成文件。</p></blockquote></li></ol><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p><a href="https://hexo.fluid-dev.com/docs/start/">fluid</a></p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p><a href="https://valine.js.org/quickstart.html">valine</a></p><hr><p>官方文档：<a href="https://hexo.io/zh-cn/">hexo</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
